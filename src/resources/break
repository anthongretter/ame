#
#   COMPILADOR DA LINGUAGEM AME (BASEADA EM X++ - src/resources/ConvCC-2024-1.txt)
#   DISCIPLINA INE5426 - CONSTRUÇÃO DE COMPILADORES - 2024/1
#   
#   Autores: 
#   A - Anthon Porath Gretter (20204787)
#   M - Matheus Antonio de Souza (21203363)
#   E - Eduardo de Moraes (19203167)
#
#   MODIFICAÇÕES DA GRAMÁTICA:
#   1 - Toda chamada de função é precedida pela palavra reservada "call" - Ex: x = call funcao(parametro);
#   2 - Todo return deve retornar um identificador - Ex: return x;
#

# Criar uma pilha chamada "loopStack" p/ armazenar os labels de fim de loops
# Presumindo que já existe um for.prox na geração de codigo intermediario, da pra reutilizar-lo aqui para GCI
FORSTAT -> for lparen ATRIBSTAT semicolumn EXPRESSION semicolumn ATRIBSTAT rparen {a} STATEMENT {b}
a = loopStack.push(for.prox) # nao precisa ser for.prox p/ sintatica, mas ja aceleraria a gci
b = loopStack.pop() # Se falhar, erro de sintaxe (nao tem fechamento de loop)
STATEMENT -> break semicolumn {c}
c = loopStack.peek() # Se falhar, erro semantico (break fora de loop)

