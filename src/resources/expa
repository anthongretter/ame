#
#   COMPILADOR DA LINGUAGEM AME (BASEADA EM X++ - src/resources/ConvCC-2024-1.txt)
#   DISCIPLINA INE5426 - CONSTRUÇÃO DE COMPILADORES - 2024/1
#   
#   Autores: 
#   A - Anthon Porath Gretter (20204787)
#   M - Matheus Antonio de Souza (21203363)
#   E - Eduardo de Moraes (19203167)
#
#   MODIFICAÇÕES DA GRAMÁTICA:
#   1 - Toda chamada de função é precedida pela palavra reservada "call" - Ex: x = call funcao(parametro);
#   2 - Todo return deve retornar um identificador - Ex: return x;
#

ATRIBSTAT -> LVALUE assign ATRIBSTATSUF             ATRIBSTAT.node = newnode(assign.vallex, LVALUE.node, ATRIBSTATSUF.node) (zb) (sint)     ATRIBSTAT -> LVALUE assign ATRIBSTATSUF{zb}

ATRIBSTATSUF -> EXPRESSION                          ATRIBSTATSUF.node = EXPRESSION.node (za) (sint)                                         ATRIBSTATSUF -> EXPRESSION{za}

EXPRESSION -> NUMEXPRESSION EXAUX                   EXAUX.left = NUMEXPRESSION.node (a) (her)                                                EXPRESSION -> NUMEXPRESSION {a}EXAUX{aa}
                                                    EXPRESSION.node = EXAUX.node  (aa) (sint)                                              

NUMEXPRESSION -> TERM NUMAUX                        NUMAUX.left = TERM.node ; (b) (her)                                                      NUMEXPRESSION -> TERM {b}NUMAUX{c}
                                                    NUMEXPRESSION.node = NUMAUX.node (c) (sint)

TERM -> UNARYEXPR TERMSUF                           TERMSUF.left = UNARYEXPR.node ; (d) (her)                                                TERM -> UNARYEXPR {d}TERMSUF{e}
                                                    TERM.node = TERMSUF.node (e) (sint)

NUMAUX -> plus TERM NUMAUXSUF                       NUMAUXSUF.left = TERM.node (f) (her)                                                     NUMAUX -> plus TERM {f}NUMAUXSUF{g}
                                                    NUMAUX.node = newnode(plus.vallex, NUMAUX.left, NUMAUXSUF.node) (g) (sint)

NUMAUX -> minus TERM NUMAUXSUF                      NUMAUXSUF.left = TERM.node (h) (her)                                                     NUMAUX -> minus TERM {h}NUMAUXSUF{i}
                                                    NUMAUX.node = newnode(minus.vallex, NUMAUX.left, NUMAUXSUF.node) (i) (sint)

NUMAUX -> &                                         NUMAUX.node = NUMAUX.left (j) (sint)                                                     NUMAUX -> &{j}

NUMAUXSUF -> NUMAUX                                 NUMAUXSUF.node = NUMAUX.node (k) (sint)                                                  NUMAUXSUF -> NUMAUX{k}

NUMAUXSUF -> &                                      NUMAUXSUF.node = NUMAUXSUF.left (l) (sint)                                               NUMAUXSUF -> &{l}

UNARYEXPR -> plus FACTOR                            UNARYEXPR.node = FACTOR.node (m) (sint)                                                  UNARYEXPR -> plus FACTOR{m}

UNARYEXPR -> minus FACTOR                           UNARYEXPR.node = FACTOR.node (n) (sint)                                                  UNARYEXPR -> minus FACTOR{n}

UNARYEXPR -> FACTOR                                 UNARYEXPR.node = FACTOR.node (o) (sint)                                                  UNARYEXPR -> FACTOR{o}

TERMSUF -> times UNARYEXPR TERMSUF(1)               TERMSUF.node = newnode(times.vallex, TERMSUF.left, TERMSUF(1).node) (p) (sint)            TERMSUF -> times UNARYEXPR {pp}TERMSUF(1){p}
                                                    TERMSUF(1).left = UNARYEXPR.node (pp) (her)

TERMSUF -> divide UNARYEXPR TERMSUF(1)              TERMSUF.node = newnode(divide.vallex, TERMSUF.left, TERMSUF(1).node) (q) (sint)           TERMSUF -> divide UNARYEXPR {qq}TERMSUF(1){q}
                                                    TERMSUF(1).left = UNARYEXPR.node (qq) (her)
                                                    
TERMSUF -> mod UNARYEXPR TERMSUF(1)                 TERMSUF.node = newnode(mod.vallex, TERMSUF.left, TERMSUF(1).node) (r) (sint)              TERMSUF -> mod UNARYEXPR {rr}TERMSUF(1){r}
                                                    TERMSUF(1).left = UNARYEXPR.node (rr) (her)

TERMSUF -> &                                        TERMSUF.node = TERMSUF.left (s) (sint)                                                   TERMSUF -> &{s}

FACTOR -> int_constant                              FACTOR.node = newnode(int_constant.vallex, _, _) (t) (sint)                              FACTOR -> int_constant{t}

FACTOR -> float_constant                            FACTOR.node = newnode(float_constant.vallex, _, _) (u) (sint)                            FACTOR -> float_constant{u}

FACTOR -> string_constant                           FACTOR.node = newnode(string_constant.vallex, _, _) (v) (sint)                           FACTOR -> string_constant{v}

FACTOR -> null                                      FACTOR.node = newnode(null.vallex, _, _) (w) (sint)                                      FACTOR -> null{w}
                                                    

FACTOR -> LVALUE                                    FACTOR.node = LVALUE.node (x) (sint)                                                     FACTOR -> LVALUE{x}

FACTOR -> lparen NUMEXPRESSION rparen               FACTOR.node = NUMEXPRESSION.node (y) (sint)                                              FACTOR -> lparen NUMEXPRESSION rparen{y}

LVALUE -> ident LVAUX                               LVALUE.node = newnode(ident.vallex, _, _) (z) (sint)                            LVALUE -> ident {zz}LVAUX{z}
                                                    LVAUX.ident = ident (zz) (her)
LVAUX -> lbracket NUMEXPRESSION rbracket LVAUXSUF   
LVAUX -> &
LVAUXSUF -> LVAUX
LVAUXSUF -> &

EXAUX -> less NUMEXPRESSION                         EXAUX.node = newnode(less.vallex, EXAUX.left, NUMEXPRESSION.node) (ab) (sint)            EXAUX -> less NUMEXPRESSION{ab}
EXAUX -> greater NUMEXPRESSION                      EXAUX.node = newnode(greater.vallex, EXAUX.left, NUMEXPRESSION.node) (ac) (sint)         EXAUX -> greater NUMEXPRESSION{ac}
EXAUX -> lessequal NUMEXPRESSION                    EXAUX.node = newnode(lessequal.vallex, EXAUX.left, NUMEXPRESSION.node) (ad) (sint)       EXAUX -> lessequal NUMEXPRESSION{ad}
EXAUX -> greaterequal NUMEXPRESSION                 EXAUX.node = newnode(greaterequal.vallex, EXAUX.left, NUMEXPRESSION.node) (ae) (sint)    EXAUX -> greaterequal NUMEXPRESSION{ae}
EXAUX -> equal NUMEXPRESSION                        EXAUX.node = newnode(equal.vallex, EXAUX.left, NUMEXPRESSION.node) (af) (sint)           EXAUX -> equal NUMEXPRESSION{af}
EXAUX -> diff NUMEXPRESSION                         EXAUX.node = newnode(diff.vallex, EXAUX.left, NUMEXPRESSION.node) (ag) (sint)            EXAUX -> diff NUMEXPRESSION{ag}
EXAUX -> &                                          EXAUX.node = EXAUX.left (ah) (sint)                                                      EXAUX -> &{ah}
