#
#   COMPILADOR DA LINGUAGEM AME (BASEADA EM X++ - src/resources/ConvCC-2024-1.txt)
#   DISCIPLINA INE5426 - CONSTRUÇÃO DE COMPILADORES - 2024/1
#   
#   Autores: 
#   A - Anthon Porath Gretter (20204787)
#   M - Matheus Antonio de Souza (21203363)
#   E - Eduardo de Moraes (19203167)
#
#   MODIFICAÇÕES DA GRAMÁTICA:
#   1 - Toda chamada de função é precedida pela palavra reservada "call" - Ex: x = call funcao(parametro);
#   2 - Todo return deve retornar um identificador - Ex: return x;
#

from src.semantic.actions import DEC, EXPA, BREAK, ESCOPOVAR

TABELA: dict = {   'ALLOCAUX': {   '$': '-',
                    'assign': '-',
                    'break': '-',
                    'call': '-',
                    'comma': '-',
                    'def': '-',
                    'diff': '-',
                    'divide': '-',
                    'else': '-',
                    'equal': '-',
                    'float': '-',
                    'float_constant': '-',
                    'for': '-',
                    'greater': '-',
                    'greaterequal': '-',
                    'ident': '-',
                    'if': '-',
                    'int': '-',
                    'int_constant': '-',
                    'lbrace': '-',
                    'lbracket': (   'lbracket',
                                    'NUMEXPRESSION',
                                    'rbracket',
                                    'ALLOCAUXSUF'),
                    'less': '-',
                    'lessequal': '-',
                    'lparen': '-',
                    'minus': '-',
                    'mod': '-',
                    'new': '-',
                    'null': '-',
                    'plus': '-',
                    'print': '-',
                    'rbrace': '-',
                    'rbracket': '-',
                    'read': '-',
                    'return': '-',
                    'rparen': '-',
                    'semicolumn': '-',
                    'string': '-',
                    'string_constant': '-',
                    'times': '-'},
    'ALLOCAUXSUF': {   '$': '-',
                       'assign': '-',
                       'break': '-',
                       'call': '-',
                       'comma': '-',
                       'def': '-',
                       'diff': '-',
                       'divide': '-',
                       'else': '-',
                       'equal': '-',
                       'float': '-',
                       'float_constant': '-',
                       'for': '-',
                       'greater': '-',
                       'greaterequal': '-',
                       'ident': '-',
                       'if': '-',
                       'int': '-',
                       'int_constant': '-',
                       'lbrace': '-',
                       'lbracket': ('ALLOCAUX',),
                       'less': '-',
                       'lessequal': '-',
                       'lparen': '-',
                       'minus': '-',
                       'mod': '-',
                       'new': '-',
                       'null': '-',
                       'plus': '-',
                       'print': '-',
                       'rbrace': '-',
                       'rbracket': '-',
                       'read': '-',
                       'return': '-',
                       'rparen': ('&',),
                       'semicolumn': ('&',),
                       'string': '-',
                       'string_constant': '-',
                       'times': '-'},
    'ALLOCEXPRESSION': {   '$': '-',
                           'assign': '-',
                           'break': '-',
                           'call': '-',
                           'comma': '-',
                           'def': '-',
                           'diff': '-',
                           'divide': '-',
                           'else': '-',
                           'equal': '-',
                           'float': '-',
                           'float_constant': '-',
                           'for': '-',
                           'greater': '-',
                           'greaterequal': '-',
                           'ident': '-',
                           'if': '-',
                           'int': '-',
                           'int_constant': '-',
                           'lbrace': '-',
                           'lbracket': '-',
                           'less': '-',
                           'lessequal': '-',
                           'lparen': '-',
                           'minus': '-',
                           'mod': '-',
                           'new': ('new', 'ALLOCEXPRESSIONSUF'),
                           'null': '-',
                           'plus': '-',
                           'print': '-',
                           'rbrace': '-',
                           'rbracket': '-',
                           'read': '-',
                           'return': '-',
                           'rparen': '-',
                           'semicolumn': '-',
                           'string': '-',
                           'string_constant': '-',
                           'times': '-'},
    'ALLOCEXPRESSIONSUF': {   '$': '-',
                              'assign': '-',
                              'break': '-',
                              'call': '-',
                              'comma': '-',
                              'def': '-',
                              'diff': '-',
                              'divide': '-',
                              'else': '-',
                              'equal': '-',
                              'float': ('float', 'ALLOCAUX'),
                              'float_constant': '-',
                              'for': '-',
                              'greater': '-',
                              'greaterequal': '-',
                              'ident': '-',
                              'if': '-',
                              'int': ('int', 'ALLOCAUX'),
                              'int_constant': '-',
                              'lbrace': '-',
                              'lbracket': '-',
                              'less': '-',
                              'lessequal': '-',
                              'lparen': '-',
                              'minus': '-',
                              'mod': '-',
                              'new': '-',
                              'null': '-',
                              'plus': '-',
                              'print': '-',
                              'rbrace': '-',
                              'rbracket': '-',
                              'read': '-',
                              'return': '-',
                              'rparen': '-',
                              'semicolumn': '-',
                              'string': ('string', 'ALLOCAUX'),
                              'string_constant': '-',
                              'times': '-'},
    'ATRIBSTAT': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': '-',
                     'float_constant': '-',
                     'for': '-',
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': ('LVALUE', 'assign', 'ATRIBSTATSUF', EXPA.zb),
                     'if': '-',
                     'int': '-',
                     'int_constant': '-',
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': '-',
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': '-',
                     'return': '-',
                     'rparen': '-',
                     'semicolumn': '-',
                     'string': '-',
                     'string_constant': '-',
                     'times': '-'},
    'ATRIBSTATSUF': {   '$': '-',
                        'assign': '-',
                        'break': '-',
                        'call': ('FUNCCALL',),
                        'comma': '-',
                        'def': '-',
                        'diff': '-',
                        'divide': '-',
                        'else': '-',
                        'equal': '-',
                        'float': '-',
                        'float_constant': ('EXPRESSION',EXPA.za),
                        'for': '-',
                        'greater': '-',
                        'greaterequal': '-',
                        'ident': ('EXPRESSION',EXPA.za),
                        'if': '-',
                        'int': '-',
                        'int_constant': ('EXPRESSION',EXPA.za),
                        'lbrace': '-',
                        'lbracket': '-',
                        'less': '-',
                        'lessequal': '-',
                        'lparen': ('EXPRESSION',EXPA.za),
                        'minus': ('EXPRESSION',EXPA.za),
                        'mod': '-',
                        'new': ('EXPRESSION',EXPA.za),
                        'null': ('EXPRESSION',EXPA.za),
                        'plus': ('EXPRESSION',EXPA.za),
                        'print': '-',
                        'rbrace': '-',
                        'rbracket': '-',
                        'read': '-',
                        'return': '-',
                        'rparen': '-',
                        'semicolumn': '-',
                        'string': '-',
                        'string_constant': ('EXPRESSION',EXPA.za),
                        'times': '-'},
    'DECAUX': {   '$': '-',
                  'assign': '-',
                  'break': '-',
                  'call': '-',
                  'comma': '-',
                  'def': '-',
                  'diff': '-',
                  'divide': '-',
                  'else': '-',
                  'equal': '-',
                  'float': '-',
                  'float_constant': '-',
                  'for': '-',
                  'greater': '-',
                  'greaterequal': '-',
                  'ident': '-',
                  'if': '-',
                  'int': '-',
                  'int_constant': '-',
                  'lbrace': '-',
                  'lbracket': (   'lbracket',
                                  'int_constant',
                                  'rbracket',
                                  'DECAUX',
                                  DEC.g),
                  'less': '-',
                  'lessequal': '-',
                  'lparen': '-',
                  'minus': '-',
                  'mod': '-',
                  'new': '-',
                  'null': '-',
                  'plus': '-',
                  'print': '-',
                  'rbrace': '-',
                  'rbracket': '-',
                  'read': '-',
                  'return': '-',
                  'rparen': '-',
                  'semicolumn': ('&', DEC.h),
                  'string': '-',
                  'string_constant': '-',
                  'times': '-'},
    'EXAUX': {   '$': '-',
                 'assign': '-',
                 'break': '-',
                 'call': '-',
                 'comma': '-',
                 'def': '-',
                 'diff': ('diff', 'NUMEXPRESSION', EXPA.ag),
                 'divide': '-',
                 'else': '-',
                 'equal': ('equal', 'NUMEXPRESSION', EXPA.af),
                 'float': '-',
                 'float_constant': '-',
                 'for': '-',
                 'greater': ('greater', 'NUMEXPRESSION', EXPA.ac),
                 'greaterequal': ('greaterequal', 'NUMEXPRESSION', EXPA.ae),
                 'ident': '-',
                 'if': '-',
                 'int': '-',
                 'int_constant': '-',
                 'lbrace': '-',
                 'lbracket': '-',
                 'less': ('less', 'NUMEXPRESSION', EXPA.ab),
                 'lessequal': ('lessequal', 'NUMEXPRESSION', EXPA.ad),
                 'lparen': '-',
                 'minus': '-',
                 'mod': '-',
                 'new': '-',
                 'null': '-',
                 'plus': '-',
                 'print': '-',
                 'rbrace': '-',
                 'rbracket': '-',
                 'read': '-',
                 'return': '-',
                 'rparen': ('&', EXPA.ah),
                 'semicolumn': ('&', EXPA.ah),
                 'string': '-',
                 'string_constant': '-',
                 'times': '-'},
    'EXPRESSION': {   '$': '-',
                      'assign': '-',
                      'break': '-',
                      'call': '-',
                      'comma': '-',
                      'def': '-',
                      'diff': '-',
                      'divide': '-',
                      'else': '-',
                      'equal': '-',
                      'float': '-',
                      'float_constant': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'for': '-',
                      'greater': '-',
                      'greaterequal': '-',
                      'ident': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'if': '-',
                      'int': '-',
                      'int_constant': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'lbrace': '-',
                      'lbracket': '-',
                      'less': '-',
                      'lessequal': '-',
                      'lparen': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'minus': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'mod': '-',
                      'new': '-',
                      'null': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'plus': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'print': '-',
                      'rbrace': '-',
                      'rbracket': '-',
                      'read': '-',
                      'return': '-',
                      'rparen': '-',
                      'semicolumn': '-',
                      'string': '-',
                      'string_constant': ('NUMEXPRESSION', EXPA.a, 'EXAUX', EXPA.aa),
                      'times': '-'},
    'FACTOR': {   '$': '-',
                  'assign': '-',
                  'break': '-',
                  'call': '-',
                  'comma': '-',
                  'def': '-',
                  'diff': '-',
                  'divide': '-',
                  'else': '-',
                  'equal': '-',
                  'float': '-',
                  'float_constant': ('float_constant', EXPA.u),
                  'for': '-',
                  'greater': '-',
                  'greaterequal': '-',
                  'ident': ('LVALUE', EXPA.x),
                  'if': '-',
                  'int': '-',
                  'int_constant': ('int_constant', EXPA.t),
                  'lbrace': '-',
                  'lbracket': '-',
                  'less': '-',
                  'lessequal': '-',
                  'lparen': ('lparen', 'NUMEXPRESSION', 'rparen', EXPA.y),
                  'minus': '-',
                  'mod': '-',
                  'new': '-',
                  'null': ('null', EXPA.w),
                  'plus': '-',
                  'print': '-',
                  'rbrace': '-',
                  'rbracket': '-',
                  'read': '-',
                  'return': '-',
                  'rparen': '-',
                  'semicolumn': '-',
                  'string': '-',
                  'string_constant': ('string_constant', EXPA.v),
                  'times': '-'},
    'FORSTAT': {   '$': '-',
                   'assign': '-',
                   'break': '-',
                   'call': '-',
                   'comma': '-',
                   'def': '-',
                   'diff': '-',
                   'divide': '-',
                   'else': '-',
                   'equal': '-',
                   'float': '-',
                   'float_constant': '-',
                   'for': (   'for',
                              'lparen',
                              ESCOPOVAR.a,
                              'ATRIBSTAT',
                              'semicolumn',
                              'EXPRESSION',
                              'semicolumn',
                              'ATRIBSTAT',
                              'rparen',
                              BREAK.a,
                              'STATEMENT',
                              ESCOPOVAR.b,
                              BREAK.b),
                   'greater': '-',
                   'greaterequal': '-',
                   'ident': '-',
                   'if': '-',
                   'int': '-',
                   'int_constant': '-',
                   'lbrace': '-',
                   'lbracket': '-',
                   'less': '-',
                   'lessequal': '-',
                   'lparen': '-',
                   'minus': '-',
                   'mod': '-',
                   'new': '-',
                   'null': '-',
                   'plus': '-',
                   'print': '-',
                   'rbrace': '-',
                   'rbracket': '-',
                   'read': '-',
                   'return': '-',
                   'rparen': '-',
                   'semicolumn': '-',
                   'string': '-',
                   'string_constant': '-',
                   'times': '-'},
    'FUNCCALL': {   '$': '-',
                    'assign': '-',
                    'break': '-',
                    'call': (   'call',
                                'ident',
                                'lparen',
                                'PARAMLISTCALL',
                                'rparen'),
                    'comma': '-',
                    'def': '-',
                    'diff': '-',
                    'divide': '-',
                    'else': '-',
                    'equal': '-',
                    'float': '-',
                    'float_constant': '-',
                    'for': '-',
                    'greater': '-',
                    'greaterequal': '-',
                    'ident': '-',
                    'if': '-',
                    'int': '-',
                    'int_constant': '-',
                    'lbrace': '-',
                    'lbracket': '-',
                    'less': '-',
                    'lessequal': '-',
                    'lparen': '-',
                    'minus': '-',
                    'mod': '-',
                    'new': '-',
                    'null': '-',
                    'plus': '-',
                    'print': '-',
                    'rbrace': '-',
                    'rbracket': '-',
                    'read': '-',
                    'return': '-',
                    'rparen': '-',
                    'semicolumn': '-',
                    'string': '-',
                    'string_constant': '-',
                    'times': '-'},
    'FUNCDEF': {   '$': '-',
                   'assign': '-',
                   'break': '-',
                   'call': '-',
                   'comma': '-',
                   'def': (   'def',
                               DEC.i,
                               ESCOPOVAR.a,
                              'ident',
                              'lparen',
                              'PARAMLIST',
                              'rparen',
                              'lbrace',
                              'STATELIST',
                              'rbrace',
                              ESCOPOVAR.b),
                   'diff': '-',
                   'divide': '-',
                   'else': '-',
                   'equal': '-',
                   'float': '-',
                   'float_constant': '-',
                   'for': '-',
                   'greater': '-',
                   'greaterequal': '-',
                   'ident': '-',
                   'if': '-',
                   'int': '-',
                   'int_constant': '-',
                   'lbrace': '-',
                   'lbracket': '-',
                   'less': '-',
                   'lessequal': '-',
                   'lparen': '-',
                   'minus': '-',
                   'mod': '-',
                   'new': '-',
                   'null': '-',
                   'plus': '-',
                   'print': '-',
                   'rbrace': '-',
                   'rbracket': '-',
                   'read': '-',
                   'return': '-',
                   'rparen': '-',
                   'semicolumn': '-',
                   'string': '-',
                   'string_constant': '-',
                   'times': '-'},
    'FUNCLIST': {   '$': '-',
                    'assign': '-',
                    'break': '-',
                    'call': '-',
                    'comma': '-',
                    'def': ('FUNCDEF', 'FUNCLISTSUF'),
                    'diff': '-',
                    'divide': '-',
                    'else': '-',
                    'equal': '-',
                    'float': '-',
                    'float_constant': '-',
                    'for': '-',
                    'greater': '-',
                    'greaterequal': '-',
                    'ident': '-',
                    'if': '-',
                    'int': '-',
                    'int_constant': '-',
                    'lbrace': '-',
                    'lbracket': '-',
                    'less': '-',
                    'lessequal': '-',
                    'lparen': '-',
                    'minus': '-',
                    'mod': '-',
                    'new': '-',
                    'null': '-',
                    'plus': '-',
                    'print': '-',
                    'rbrace': '-',
                    'rbracket': '-',
                    'read': '-',
                    'return': '-',
                    'rparen': '-',
                    'semicolumn': '-',
                    'string': '-',
                    'string_constant': '-',
                    'times': '-'},
    'FUNCLISTSUF': {   '$': ('&',),
                       'assign': '-',
                       'break': '-',
                       'call': '-',
                       'comma': '-',
                       'def': ('FUNCLIST',),
                       'diff': '-',
                       'divide': '-',
                       'else': '-',
                       'equal': '-',
                       'float': '-',
                       'float_constant': '-',
                       'for': '-',
                       'greater': '-',
                       'greaterequal': '-',
                       'ident': '-',
                       'if': '-',
                       'int': '-',
                       'int_constant': '-',
                       'lbrace': '-',
                       'lbracket': '-',
                       'less': '-',
                       'lessequal': '-',
                       'lparen': '-',
                       'minus': '-',
                       'mod': '-',
                       'new': '-',
                       'null': '-',
                       'plus': '-',
                       'print': '-',
                       'rbrace': '-',
                       'rbracket': '-',
                       'read': '-',
                       'return': '-',
                       'rparen': '-',
                       'semicolumn': '-',
                       'string': '-',
                       'string_constant': '-',
                       'times': '-'},
    'IFSTAT': {   '$': '-',
                  'assign': '-',
                  'break': '-',
                  'call': '-',
                  'comma': '-',
                  'def': '-',
                  'diff': '-',
                  'divide': '-',
                  'else': '-',
                  'equal': '-',
                  'float': '-',
                  'float_constant': '-',
                  'for': '-',
                  'greater': '-',
                  'greaterequal': '-',
                  'ident': '-',
                  'if': (   'if',
                            'lparen',
                            'EXPRESSION',
                            'rparen',
                            ESCOPOVAR.a,
                            'STATEMENT',
                            ESCOPOVAR.b,
                            'IFSTATSUF'),
                  'int': '-',
                  'int_constant': '-',
                  'lbrace': '-',
                  'lbracket': '-',
                  'less': '-',
                  'lessequal': '-',
                  'lparen': '-',
                  'minus': '-',
                  'mod': '-',
                  'new': '-',
                  'null': '-',
                  'plus': '-',
                  'print': '-',
                  'rbrace': '-',
                  'rbracket': '-',
                  'read': '-',
                  'return': '-',
                  'rparen': '-',
                  'semicolumn': '-',
                  'string': '-',
                  'string_constant': '-',
                  'times': '-'},
    'IFSTATSUF': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': ('else', ESCOPOVAR.a, 'STATEMENT', ESCOPOVAR.b),
                     'equal': '-',
                     'float': '-',
                     'float_constant': '-',
                     'for': '-',
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': '-',
                     'if': '-',
                     'int': '-',
                     'int_constant': '-',
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': '-',
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': '-',
                     'return': '-',
                     'rparen': '-',
                     'semicolumn': ('&',),
                     'string': '-',
                     'string_constant': '-',
                     'times': '-'},
    'LVALUE': {   '$': '-',
                  'assign': '-',
                  'break': '-',
                  'call': '-',
                  'comma': '-',
                  'def': '-',
                  'diff': '-',
                  'divide': '-',
                  'else': '-',
                  'equal': '-',
                  'float': '-',
                  'float_constant': '-',
                  'for': '-',
                  'greater': '-',
                  'greaterequal': '-',
                  'ident': ('ident', EXPA.zz, 'LVAUX', EXPA.z),
                  'if': '-',
                  'int': '-',
                  'int_constant': '-',
                  'lbrace': '-',
                  'lbracket': '-',
                  'less': '-',
                  'lessequal': '-',
                  'lparen': '-',
                  'minus': '-',
                  'mod': '-',
                  'new': '-',
                  'null': '-',
                  'plus': '-',
                  'print': '-',
                  'rbrace': '-',
                  'rbracket': '-',
                  'read': '-',
                  'return': '-',
                  'rparen': '-',
                  'semicolumn': '-',
                  'string': '-',
                  'string_constant': '-',
                  'times': '-'},
    'LVAUX': {   '$': '-',
                 'assign': ('&',),
                 'break': '-',
                 'call': '-',
                 'comma': '-',
                 'def': '-',
                 'diff': ('&',),
                 'divide': ('&',),
                 'else': '-',
                 'equal': ('&',),
                 'float': '-',
                 'float_constant': '-',
                 'for': '-',
                 'greater': ('&',),
                 'greaterequal': ('&',),
                 'ident': '-',
                 'if': '-',
                 'int': '-',
                 'int_constant': '-',
                 'lbrace': '-',
                 'lbracket': (   'lbracket',
                                 'NUMEXPRESSION',
                                 'rbracket',
                                 'LVAUXSUF'),
                 'less': ('&',),
                 'lessequal': ('&',),
                 'lparen': '-',
                 'minus': ('&',),
                 'mod': ('&',),
                 'new': '-',
                 'null': '-',
                 'plus': ('&',),
                 'print': '-',
                 'rbrace': '-',
                 'rbracket': ('&',),
                 'read': '-',
                 'return': '-',
                 'rparen': ('&',),
                 'semicolumn': ('&',),
                 'string': '-',
                 'string_constant': '-',
                 'times': ('&',)},
    'LVAUXSUF': {   '$': '-',
                    'assign': ('&',),
                    'break': '-',
                    'call': '-',
                    'comma': '-',
                    'def': '-',
                    'diff': ('&',),
                    'divide': ('&',),
                    'else': '-',
                    'equal': ('&',),
                    'float': '-',
                    'float_constant': '-',
                    'for': '-',
                    'greater': ('&',),
                    'greaterequal': ('&',),
                    'ident': '-',
                    'if': '-',
                    'int': '-',
                    'int_constant': '-',
                    'lbrace': '-',
                    'lbracket': ('LVAUX',),
                    'less': ('&',),
                    'lessequal': ('&',),
                    'lparen': '-',
                    'minus': ('&',),
                    'mod': ('&',),
                    'new': '-',
                    'null': '-',
                    'plus': ('&',),
                    'print': '-',
                    'rbrace': '-',
                    'rbracket': ('&',),
                    'read': '-',
                    'return': '-',
                    'rparen': ('&',),
                    'semicolumn': ('&',),
                    'string': '-',
                    'string_constant': '-',
                    'times': ('&',)},
    'NUMAUX': {   '$': '-',
                  'assign': '-',
                  'break': '-',
                  'call': '-',
                  'comma': '-',
                  'def': '-',
                  'diff': ('&',EXPA.j),
                  'divide': '-',
                  'else': '-',
                  'equal': ('&',EXPA.j),
                  'float': '-',
                  'float_constant': '-',
                  'for': '-',
                  'greater': ('&',EXPA.j),
                  'greaterequal': ('&',EXPA.j),
                  'ident': '-',
                  'if': '-',
                  'int': '-',
                  'int_constant': '-',
                  'lbrace': '-',
                  'lbracket': '-',
                  'less': ('&',EXPA.j),
                  'lessequal': ('&',EXPA.j),
                  'lparen': '-',
                  'minus': ('minus', 'TERM', EXPA.h, 'NUMAUXSUF', EXPA.i),
                  'mod': '-',
                  'new': '-',
                  'null': '-',
                  'plus': ('plus', 'TERM', EXPA.f, 'NUMAUXSUF', EXPA.g),
                  'print': '-',
                  'rbrace': '-',
                  'rbracket': ('&',EXPA.j),
                  'read': '-',
                  'return': '-',
                  'rparen': ('&',EXPA.j),
                  'semicolumn': ('&',EXPA.j),
                  'string': '-',
                  'string_constant': '-',
                  'times': '-'},
    'NUMAUXSUF': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': ('&',EXPA.l),
                     'divide': '-',
                     'else': '-',
                     'equal': ('&',EXPA.l),
                     'float': '-',
                     'float_constant': '-',
                     'for': '-',
                     'greater': ('&',EXPA.l),
                     'greaterequal': ('&',EXPA.l),
                     'ident': '-',
                     'if': '-',
                     'int': '-',
                     'int_constant': '-',
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': ('&',EXPA.l),
                     'lessequal': ('&',EXPA.l),
                     'lparen': '-',
                     'minus': ('NUMAUX',EXPA.k),
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': ('NUMAUX',EXPA.k),
                     'print': '-',
                     'rbrace': '-',
                     'rbracket': ('&',EXPA.l),
                     'read': '-',
                     'return': '-',
                     'rparen': ('&',EXPA.l),
                     'semicolumn': ('&',EXPA.l),
                     'string': '-',
                     'string_constant': '-',
                     'times': '-'},
    'NUMEXPRESSION': {   '$': '-',
                         'assign': '-',
                         'break': '-',
                         'call': '-',
                         'comma': '-',
                         'def': '-',
                         'diff': '-',
                         'divide': '-',
                         'else': '-',
                         'equal': '-',
                         'float': '-',
                         'float_constant': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'for': '-',
                         'greater': '-',
                         'greaterequal': '-',
                         'ident': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'if': '-',
                         'int': '-',
                         'int_constant': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'lbrace': '-',
                         'lbracket': '-',
                         'less': '-',
                         'lessequal': '-',
                         'lparen': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'minus': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'mod': '-',
                         'new': '-',
                         'null': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'plus': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'print': '-',
                         'rbrace': '-',
                         'rbracket': '-',
                         'read': '-',
                         'return': '-',
                         'rparen': '-',
                         'semicolumn': '-',
                         'string': '-',
                         'string_constant': ('TERM', EXPA.b, 'NUMAUX', EXPA.c),
                         'times': '-'},
    'PARAMLIST': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': ('float', DEC.k, ESCOPOVAR.c, 'ident', 'PARAMLISTSUF'),
                     'float_constant': '-',
                     'for': '-',
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': '-',
                     'if': '-',
                     'int': ('int', DEC.j, ESCOPOVAR.c, 'ident', 'PARAMLISTSUF'),
                     'int_constant': '-',
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': '-',
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': '-',
                     'return': '-',
                     'rparen': ('&',),
                     'semicolumn': '-',
                     'string': ('string', DEC.l, ESCOPOVAR.c, 'ident', 'PARAMLISTSUF'),
                     'string_constant': '-',
                     'times': '-'},
    'PARAMLISTCALL': {   '$': '-',
                         'assign': '-',
                         'break': '-',
                         'call': '-',
                         'comma': '-',
                         'def': '-',
                         'diff': '-',
                         'divide': '-',
                         'else': '-',
                         'equal': '-',
                         'float': '-',
                         'float_constant': '-',
                         'for': '-',
                         'greater': '-',
                         'greaterequal': '-',
                         'ident': ('ident', 'PARAMLISTCALLSUF'),
                         'if': '-',
                         'int': '-',
                         'int_constant': '-',
                         'lbrace': '-',
                         'lbracket': '-',
                         'less': '-',
                         'lessequal': '-',
                         'lparen': '-',
                         'minus': '-',
                         'mod': '-',
                         'new': '-',
                         'null': '-',
                         'plus': '-',
                         'print': '-',
                         'rbrace': '-',
                         'rbracket': '-',
                         'read': '-',
                         'return': '-',
                         'rparen': '-',
                         'semicolumn': '-',
                         'string': '-',
                         'string_constant': '-',
                         'times': '-'},
    'PARAMLISTCALLSUF': {   '$': '-',
                            'assign': '-',
                            'break': '-',
                            'call': '-',
                            'comma': ('comma', 'PARAMLISTCALL'),
                            'def': '-',
                            'diff': '-',
                            'divide': '-',
                            'else': '-',
                            'equal': '-',
                            'float': '-',
                            'float_constant': '-',
                            'for': '-',
                            'greater': '-',
                            'greaterequal': '-',
                            'ident': '-',
                            'if': '-',
                            'int': '-',
                            'int_constant': '-',
                            'lbrace': '-',
                            'lbracket': '-',
                            'less': '-',
                            'lessequal': '-',
                            'lparen': '-',
                            'minus': '-',
                            'mod': '-',
                            'new': '-',
                            'null': '-',
                            'plus': '-',
                            'print': '-',
                            'rbrace': '-',
                            'rbracket': '-',
                            'read': '-',
                            'return': '-',
                            'rparen': ('&',),
                            'semicolumn': '-',
                            'string': '-',
                            'string_constant': '-',
                            'times': '-'},
    'PARAMLISTSUF': {   '$': '-',
                        'assign': '-',
                        'break': '-',
                        'call': '-',
                        'comma': ('comma', 'PARAMLIST'),
                        'def': '-',
                        'diff': '-',
                        'divide': '-',
                        'else': '-',
                        'equal': '-',
                        'float': '-',
                        'float_constant': '-',
                        'for': '-',
                        'greater': '-',
                        'greaterequal': '-',
                        'ident': '-',
                        'if': '-',
                        'int': '-',
                        'int_constant': '-',
                        'lbrace': '-',
                        'lbracket': '-',
                        'less': '-',
                        'lessequal': '-',
                        'lparen': '-',
                        'minus': '-',
                        'mod': '-',
                        'new': '-',
                        'null': '-',
                        'plus': '-',
                        'print': '-',
                        'rbrace': '-',
                        'rbracket': '-',
                        'read': '-',
                        'return': '-',
                        'rparen': ('&',),
                        'semicolumn': '-',
                        'string': '-',
                        'string_constant': '-',
                        'times': '-'},
    'PRINTSTAT': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': '-',
                     'float_constant': '-',
                     'for': '-',
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': '-',
                     'if': '-',
                     'int': '-',
                     'int_constant': '-',
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': ('print', 'EXPRESSION'),
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': '-',
                     'return': '-',
                     'rparen': '-',
                     'semicolumn': '-',
                     'string': '-',
                     'string_constant': '-',
                     'times': '-'},
    'PROGRAM': {   '$': ('&',),
                   'assign': '-',
                   'break': ('STATEMENT',),
                   'call': '-',
                   'comma': '-',
                   'def': ('FUNCLIST',),
                   'diff': '-',
                   'divide': '-',
                   'else': '-',
                   'equal': '-',
                   'float': ('STATEMENT',),
                   'float_constant': '-',
                   'for': ('STATEMENT',),
                   'greater': '-',
                   'greaterequal': '-',
                   'ident': ('STATEMENT',),
                   'if': ('STATEMENT',),
                   'int': ('STATEMENT',),
                   'int_constant': '-',
                   'lbrace': ('STATEMENT',),
                   'lbracket': '-',
                   'less': '-',
                   'lessequal': '-',
                   'lparen': '-',
                   'minus': '-',
                   'mod': '-',
                   'new': '-',
                   'null': '-',
                   'plus': '-',
                   'print': ('STATEMENT',),
                   'rbrace': '-',
                   'rbracket': '-',
                   'read': ('STATEMENT',),
                   'return': ('STATEMENT',),
                   'rparen': '-',
                   'semicolumn': ('STATEMENT',),
                   'string': ('STATEMENT',),
                   'string_constant': '-',
                   'times': '-'},
    'READSTAT': {   '$': '-',
                    'assign': '-',
                    'break': '-',
                    'call': '-',
                    'comma': '-',
                    'def': '-',
                    'diff': '-',
                    'divide': '-',
                    'else': '-',
                    'equal': '-',
                    'float': '-',
                    'float_constant': '-',
                    'for': '-',
                    'greater': '-',
                    'greaterequal': '-',
                    'ident': '-',
                    'if': '-',
                    'int': '-',
                    'int_constant': '-',
                    'lbrace': '-',
                    'lbracket': '-',
                    'less': '-',
                    'lessequal': '-',
                    'lparen': '-',
                    'minus': '-',
                    'mod': '-',
                    'new': '-',
                    'null': '-',
                    'plus': '-',
                    'print': '-',
                    'rbrace': '-',
                    'rbracket': '-',
                    'read': ('read', 'LVALUE'),
                    'return': '-',
                    'rparen': '-',
                    'semicolumn': '-',
                    'string': '-',
                    'string_constant': '-',
                    'times': '-'},
    'RETURNSTAT': {   '$': '-',
                      'assign': '-',
                      'break': '-',
                      'call': '-',
                      'comma': '-',
                      'def': '-',
                      'diff': '-',
                      'divide': '-',
                      'else': '-',
                      'equal': '-',
                      'float': '-',
                      'float_constant': '-',
                      'for': '-',
                      'greater': '-',
                      'greaterequal': '-',
                      'ident': '-',
                      'if': '-',
                      'int': '-',
                      'int_constant': '-',
                      'lbrace': '-',
                      'lbracket': '-',
                      'less': '-',
                      'lessequal': '-',
                      'lparen': '-',
                      'minus': '-',
                      'mod': '-',
                      'new': '-',
                      'null': '-',
                      'plus': '-',
                      'print': '-',
                      'rbrace': '-',
                      'rbracket': '-',
                      'read': '-',
                      'return': ('return', 'ident'),
                      'rparen': '-',
                      'semicolumn': '-',
                      'string': '-',
                      'string_constant': '-',
                      'times': '-'},
    'STATELIST': {   '$': '-',
                     'assign': '-',
                     'break': ('STATEMENT', 'STATEMENTSUF'),
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': ('STATEMENT', 'STATEMENTSUF'),
                     'float_constant': '-',
                     'for': ('STATEMENT', 'STATEMENTSUF'),
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': ('STATEMENT', 'STATEMENTSUF'),
                     'if': ('STATEMENT', 'STATEMENTSUF'),
                     'int': ('STATEMENT', 'STATEMENTSUF'),
                     'int_constant': '-',
                     'lbrace': ('STATEMENT', 'STATEMENTSUF'),
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': ('STATEMENT', 'STATEMENTSUF'),
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': ('STATEMENT', 'STATEMENTSUF'),
                     'return': ('STATEMENT', 'STATEMENTSUF'),
                     'rparen': '-',
                     'semicolumn': ('STATEMENT', 'STATEMENTSUF'),
                     'string': ('STATEMENT', 'STATEMENTSUF'),
                     'string_constant': '-',
                     'times': '-'},
    'STATEMENT': {   '$': '-',
                     'assign': '-',
                     'break': ('break', 'semicolumn', BREAK.c),
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': ('VARDECL', 'semicolumn'),
                     'float_constant': '-',
                     'for': ('FORSTAT', 'semicolumn'),
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': ('ATRIBSTAT', 'semicolumn'),
                     'if': ('IFSTAT', 'semicolumn'),
                     'int': ('VARDECL', 'semicolumn'),
                     'int_constant': '-',
                     'lbrace': ('lbrace', 'STATELIST', 'rbrace'),
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': '-',
                     'minus': '-',
                     'mod': '-',
                     'new': '-',
                     'null': '-',
                     'plus': '-',
                     'print': ('PRINTSTAT', 'semicolumn'),
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': ('READSTAT', 'semicolumn'),
                     'return': ('RETURNSTAT', 'semicolumn'),
                     'rparen': '-',
                     'semicolumn': ('semicolumn',),
                     'string': ('VARDECL', 'semicolumn'),
                     'string_constant': '-',
                     'times': '-'},
    'STATEMENTSUF': {   '$': '-',
                        'assign': '-',
                        'break': ('STATELIST',),
                        'call': '-',
                        'comma': '-',
                        'def': '-',
                        'diff': '-',
                        'divide': '-',
                        'else': '-',
                        'equal': '-',
                        'float': ('STATELIST',),
                        'float_constant': '-',
                        'for': ('STATELIST',),
                        'greater': '-',
                        'greaterequal': '-',
                        'ident': ('STATELIST',),
                        'if': ('STATELIST',),
                        'int': ('STATELIST',),
                        'int_constant': '-',
                        'lbrace': ('STATELIST',),
                        'lbracket': '-',
                        'less': '-',
                        'lessequal': '-',
                        'lparen': '-',
                        'minus': '-',
                        'mod': '-',
                        'new': '-',
                        'null': '-',
                        'plus': '-',
                        'print': ('STATELIST',),
                        'rbrace': ('&',),
                        'rbracket': '-',
                        'read': ('STATELIST',),
                        'return': ('STATELIST',),
                        'rparen': '-',
                        'semicolumn': ('STATELIST',),
                        'string': ('STATELIST',),
                        'string_constant': '-',
                        'times': '-'},
    'TERM': {   '$': '-',
                'assign': '-',
                'break': '-',
                'call': '-',
                'comma': '-',
                'def': '-',
                'diff': '-',
                'divide': '-',
                'else': '-',
                'equal': '-',
                'float': '-',
                'float_constant': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'for': '-',
                'greater': '-',
                'greaterequal': '-',
                'ident': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'if': '-',
                'int': '-',
                'int_constant': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'lbrace': '-',
                'lbracket': '-',
                'less': '-',
                'lessequal': '-',
                'lparen': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'minus': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'mod': '-',
                'new': '-',
                'null': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'plus': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'print': '-',
                'rbrace': '-',
                'rbracket': '-',
                'read': '-',
                'return': '-',
                'rparen': '-',
                'semicolumn': '-',
                'string': '-',
                'string_constant': ('UNARYEXPR', EXPA.d, 'TERMSUF', EXPA.e),
                'times': '-'},
    'TERMSUF': {   '$': '-',
                   'assign': '-',
                   'break': '-',
                   'call': '-',
                   'comma': '-',
                   'def': '-',
                   'diff': ('&', EXPA.s),
                   'divide': ('divide', 'UNARYEXPR', EXPA.qq, 'TERMSUF', EXPA.q),
                   'else': '-',
                   'equal': ('&', EXPA.s),
                   'float': '-',
                   'float_constant': '-',
                   'for': '-',
                   'greater': ('&', EXPA.s),
                   'greaterequal': ('&', EXPA.s),
                   'ident': '-',
                   'if': '-',
                   'int': '-',
                   'int_constant': '-',
                   'lbrace': '-',
                   'lbracket': '-',
                   'less': ('&', EXPA.s),
                   'lessequal': ('&', EXPA.s),
                   'lparen': '-',
                   'minus': ('&', EXPA.s),
                   'mod': ('mod', 'UNARYEXPR', EXPA.rr, 'TERMSUF', EXPA.r),
                   'new': '-',
                   'null': '-',
                   'plus': ('&', EXPA.s),
                   'print': '-',
                   'rbrace': '-',
                   'rbracket': ('&', EXPA.s),
                   'read': '-',
                   'return': '-',
                   'rparen': ('&', EXPA.s),
                   'semicolumn': ('&', EXPA.s),
                   'string': '-',
                   'string_constant': '-',
                   'times': ('times', 'UNARYEXPR', EXPA.pp, 'TERMSUF', EXPA.p)},
    'UNARYEXPR': {   '$': '-',
                     'assign': '-',
                     'break': '-',
                     'call': '-',
                     'comma': '-',
                     'def': '-',
                     'diff': '-',
                     'divide': '-',
                     'else': '-',
                     'equal': '-',
                     'float': '-',
                     'float_constant': ('FACTOR', EXPA.o),
                     'for': '-',
                     'greater': '-',
                     'greaterequal': '-',
                     'ident': ('FACTOR', EXPA.o),
                     'if': '-',
                     'int': '-',
                     'int_constant': ('FACTOR', EXPA.o),
                     'lbrace': '-',
                     'lbracket': '-',
                     'less': '-',
                     'lessequal': '-',
                     'lparen': ('FACTOR', EXPA.o),
                     'minus': ('minus', 'FACTOR', EXPA.n),
                     'mod': '-',
                     'new': '-',
                     'null': ('FACTOR', EXPA.o),
                     'plus': ('plus', 'FACTOR', EXPA.m),
                     'print': '-',
                     'rbrace': '-',
                     'rbracket': '-',
                     'read': '-',
                     'return': '-',
                     'rparen': '-',
                     'semicolumn': '-',
                     'string': '-',
                     'string_constant': ('FACTOR', EXPA.o),
                     'times': '-'},
    'VARDECL': {   '$': '-',
                   'assign': '-',
                   'break': '-',
                   'call': '-',
                   'comma': '-',
                   'def': '-',
                   'diff': '-',
                   'divide': '-',
                   'else': '-',
                   'equal': '-',
                   'float': ('float', DEC.c, ESCOPOVAR.c, 'ident', 'DECAUX', DEC.d),
                   'float_constant': '-',
                   'for': '-',
                   'greater': '-',
                   'greaterequal': '-',
                   'ident': '-',
                   'if': '-',
                   'int': ('int', DEC.a, ESCOPOVAR.c, 'ident', 'DECAUX', DEC.b),
                   'int_constant': '-',
                   'lbrace': '-',
                   'lbracket': '-',
                   'less': '-',
                   'lessequal': '-',
                   'lparen': '-',
                   'minus': '-',
                   'mod': '-',
                   'new': '-',
                   'null': '-',
                   'plus': '-',
                   'print': '-',
                   'rbrace': '-',
                   'rbracket': '-',
                   'read': '-',
                   'return': '-',
                   'rparen': '-',
                   'semicolumn': '-',
                   'string': ('string', DEC.e, ESCOPOVAR.c, 'ident', 'DECAUX', DEC.f),
                   'string_constant': '-',
                   'times': '-'}
    }

# pprint.pprint(TABELA, indent=4)
